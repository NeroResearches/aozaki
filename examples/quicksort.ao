let
    foldl = f: acc: arr:
        case (uncons arr) of {
            (h, t) -> foldl f (f acc h) t,
            () -> acc,
        };
    flip = f: x: y: f y x;
    partition = f: arr:
        case (uncons arr) of {
            (h, t) -> if (f h) (_: cons h $ partition f t) (_: partition f t),
            () -> ()
        };
    quicksort = arr:
        case (uncons arr) of {
            (h, t) ->
                let gt_part = quicksort $ partition (flip gt h) t;
                    lt_part = quicksort $ partition (flip lt h) t;
                in concat lt_part $ cons h $ gt_part,
            () -> ()
        };
in quicksort (5, 3, 4, 2, 1)

